{"version":3,"sources":["Header.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","defultChartData","year","clickHandler","bind","assertThisInitialized","state","prefectures","chartData","_this2","superagent","get","set","then","res","data","body","result","map","e","isChecked","setState","err","console","error","prefectureId","_self","Promise","resolve","reject","query","prefCode","cityCode","id","idName","prefName","getIdList","count","forEach","val","push","length","index","getChartData","formatedData","obj","name","formatedDataVal","value","getPrefectures","_this3","getPrefectureId","currentTarget","getAttribute","newPrefectures","slice","String","checkedData","formatdData","formatData","_this4","style","textAlign","fontSize","marginTop","checkBoxs","key","htmlFor","type","checked","onChange","lines","es6","dataKey","stroke","renderLineChart","width","height","paddingLeft","margin","top","right","bottom","left","strokeDasharray","ticks","unit","src_Header_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.274227f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render () {\n    return (\n      <header className=\"header\">\n        <h1 className=\"header__title\">都道府県別の総人口推移グラフ</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react'\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts'\nimport superagent from 'superagent'\nimport Header from './Header'\nimport './App.css'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.defultChartData = [{year: 1960,}, {year: 1965,}, {year: 1970,}, {year: 1975,}, {year: 1980,}, {year: 1985,}, {year: 1990,}, {year: 1995,}, {year: 2000,}, {year: 2005,}, {year: 2010,}, {year: 2015,}, {year: 2020,}, {year: 2025,}, {year: 2030,}, {year: 2035,}, {year: 2040,}, {year: 2045,},]\n    this.clickHandler = this.clickHandler.bind(this)\n\n    this.state = {\n      prefectures: null, // 都道府県データ\n      chartData: this.defultChartData // グラフデータ\n    }\n  }\n\n  // 都道府県一覧を取得\n  getPrefectures () {\n    superagent.get('https://opendata.resas-portal.go.jp/api/v1/prefectures')\n      .set('X-API-KEY', 'MCOgUhZu1Cc7EZsoRYBmpfTRlSmUieEp66tI3xnx')\n      .set('Accept', 'application/json')\n      .then(res => {\n        const data = res.body.result.map(e => {\n          e.isChecked = false\n          return e\n        })\n        this.setState({prefectures: data})\n      }, err => {\n        console.error(err)\n      })\n  }\n\n  // 人口データを取得\n  getChartData (prefectureId) {\n    const url = 'https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear'\n    const _self = this\n\n    return new Promise(function (resolve, reject) {\n      superagent.get(url)\n        .query({\n          prefCode: prefectureId,\n          cityCode: '-',\n        })\n        .set('X-API-KEY', 'MCOgUhZu1Cc7EZsoRYBmpfTRlSmUieEp66tI3xnx')\n        .set('Accept', 'application/json')\n        .then(res => {\n          res.body.result.data[0].id = prefectureId\n          res.body.result.data[0].idName = _self.state.prefectures[prefectureId - 1].prefName\n          resolve(res.body.result.data[0])\n        }, err => {\n          reject(err)\n        })\n    })\n  }\n\n  // チェックされている都道府県の人口データを取得\n  checkedData () {\n    const getIdList = []\n    const data = []\n    const _self = this\n    let count = 0\n\n\n    _self.state.prefectures.forEach((val) => {\n      if (val.isChecked) {getIdList.push(val)}\n    })\n\n    return new Promise(function (resolve, reject) {\n      if (getIdList.length === 0) {\n        resolve(data)\n      } else {\n        getIdList.forEach((val, index) => {\n          _self.getChartData(val.prefCode)\n            .then(res => {\n              data.push(res)\n              count++\n\n              if (count === getIdList.length) {\n                resolve(data)\n              }\n            })\n        })\n      }\n    })\n  }\n\n  // グラフに描画するデータへ整形\n  formatData (data) {\n    const formatedData = []\n\n    // 年度のみformatedDataへ追加\n    if (data.length === 0) {\n      return this.defultChartData\n    } else {\n      data[0].data.forEach((val) => {\n        const obj = {}\n        obj['year'] = val.year\n        formatedData.push(obj)\n      })\n    }\n\n    data.forEach((obj) => {\n      const name = obj.idName\n      obj.data.forEach((val) => {\n        formatedData.forEach((formatedDataVal) => {\n          if (formatedDataVal.year === val.year) {\n            formatedDataVal[name] = val.value\n          }\n        })\n      })\n    })\n\n    return formatedData\n  }\n\n  componentWillMount () {\n    this.getPrefectures()\n  }\n\n  clickHandler (e) {\n    // クリックされた都道府県の都道府県コードを取得\n    const elm = e.currentTarget;\n    const getPrefectureId = elm.getAttribute('id')\n\n    // チェックボックスの状態管理\n    const newPrefectures = this.state.prefectures.slice();\n    newPrefectures.forEach((index) => {\n      if (String(index.prefCode) === getPrefectureId) {\n        index.isChecked = !index.isChecked\n      }\n    })\n\n    // チェックされている都道府県の人口データを取得\n    this.checkedData()\n      .then(res => {\n        const formatdData = this.formatData(res)\n        this.setState({\n          prefectures: newPrefectures,\n          chartData: formatdData\n        })\n      })\n  }\n\n  render () {\n\n    if (!this.state.prefectures) {\n      return <div style={{textAlign: 'center', fontSize: '4rem', marginTop: '40vh'}}>読み込み中・・・</div>\n    }\n\n    const checkBoxs = this.state.prefectures.map(e => {\n      return (\n        <li key={e.prefCode}>\n          <label htmlFor={e.prefCode}>\n            <input type=\"checkbox\" id={e.prefCode} checked={e.isChecked} onChange={this.clickHandler} />\n            {e.prefName}\n          </label>\n        </li>\n      )\n    })\n\n    const lines = this.state.prefectures.map(e => {\n      return <Line key={e.prefName} dataKey={e.prefName} stroke=\"#2cc2e4\" />\n    })\n\n    const renderLineChart = (\n      <div style={{width: '100%', height: '30vw', paddingLeft: 100}}>\n        <ResponsiveContainer>\n          <LineChart\n            data={this.state.chartData}\n            margin={{top: 5, right: 20, bottom: 5, left: 0}}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis\n              dataKey=\"year\"\n              ticks={[1965, 1975, 1985, 1995, 2005, 2015, 2025, 2035, 2045]}\n              unit=\"年\"\n            />\n            <YAxis\n              ticks={[1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000, 11000000, 12000000, 13000000, 14000000, 15000000]}\n              unit=\"人\"\n            />\n            <Tooltip/>\n            {lines}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n\n    return (\n      <div className=\"App\">\n        <Header/>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ul className=\"prefectures\">\n              {checkBoxs}\n            </ul>\n          </div>\n          <div className=\"col\">\n            {renderLineChart}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}